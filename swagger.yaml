openapi: 3.0.0
info:
  title: Grocery Express Api
  description: Grocery Express for CS6310 Assignment5
  version: 0.0.1
servers:
  - url: http://localhost:8080
    description:  Use this when running locally in dev or docker mode.
tags:
- name: Drone
  description: drone can deliver order 
- name: Employee
  description: pilot can control drone 
- name: Item
  description: items are sold 
- name: Line
  description: item constitues line, line constitues order 
- name: Store
  description: store
- name: User
  description: customer/administrator
- name: Order
  description: order

paths:
  /{store_id}/drones:
    get:
      summary: List all drones for a store.
      tags:
      - Drone
      parameters:
      - $ref: '#/components/parameters/storeId'
      responses:
        '200':    # status code
          description: A JSON array of drones
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Drones"
    post:
      summary: Create an drone for a store
      tags:
      - Drone
      parameters:
      - $ref: '#/components/parameters/storeId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createDroneReq"
      responses:
        201:
          description: OK

  /drones/{drone_id}:
    put:
      summary: Update status and trips_left
      tags:
      - Drone
      parameters:
      - $ref: '#/components/parameters/droneId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateDroneReq"
      responses:
        '200':    # status code
          description: A updated object of drone
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Drone"

  /{store_id}/employees:
    get:
      summary: List all employees for a store.
      tags:
      - Employee
      parameters:
      - $ref: '#/components/parameters/storeId'
      responses:
        '200':    # status code
          description: A JSON array of employees
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Employees"

    post:
      summary: Create an employee for a store
      tags:
      - Employee
      parameters:
      - $ref: '#/components/parameters/storeId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createEmployeeReq"
      responses:
        201:
          description: OK


  /employees/{employee_id}:
    put:
      summary: Update pilot status
      tags:
      - Employee
      parameters:
      - $ref: '#/components/parameters/employeeId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateEmployeeReq"
      responses:
        '200':    # status code
          description: A updated object of employee
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Employee"
    get:
      summary: Get a employee by id.
      tags:
      - Employee
      parameters:
      - $ref: '#/components/parameters/employeeId'
      responses:
        '200':    # status code
          description: A object of employees
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Employee"

  /{store_id}/items:
    get:
      summary: List all items for a store.
      tags:
      - Item
      parameters:
      - $ref: '#/components/parameters/itemId'
      responses:
        '200':    # status code
          description: A JSON array o items
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Items"
  
    post:
      summary: Create an item for a store
      tags:
      - Item
      parameters:
      - $ref: '#/components/parameters/itemId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createItemReq"
      responses:
        201:
          description: OK
          
  /items/{item_id}:
    get:
      summary: Get an item by id.
      tags:
      - Item
      parameters:
      - $ref: '#/components/parameters/itemId'
      responses:
        '200':    # status code
          description: A object of item
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Item"

  /{order_id}/lines:
    get:
      summary: List all lines for an order.
      tags:
      - Line
      parameters:
      - $ref: '#/components/parameters/lineId'
      responses:
        '200':    # status code
          description: A JSON array of lines
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Lines"
  
    post:
      summary: Create a line for an order
      tags:
      - Line
      parameters:
      - $ref: '#/components/parameters/lineId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createLineReq"
      responses:
        201:
          description: OK
          
  /lines/{line_id}:
    delete:
      summary: delete a line by id.
      tags:
      - Line
      parameters:
      - $ref: '#/components/parameters/lineId'
      responses:
        '200':    # status code
          description: Null response






  /stores:
    get:
      summary: List all stores.
      tags:
      - Store
      parameters:
      - $ref: '#/components/parameters/storeId'
      responses:
        '200':    # status code
          description: A JSON array of stores
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Stores"
  
    post:
      summary: Create a new store
      tags:
      - Store
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createStoreReq"
      responses:
        201:
          description: OK
          
  /stores/{store_id}:
    get:
      summary: Get store by id.
      tags:
      - Store
      parameters:
      - $ref: '#/components/parameters/storeId'
      responses:
        '200':    # status code
          description: A object of store
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Store"

  /stores/{store_id}/pendingIncome:
    get:
      summary: Get pending income by store id.
      tags:
      - Store
      parameters:
      - $ref: '#/components/parameters/storeId'
      responses:
        '200':    # status code
          description: A pending income
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/revenue"

  /users:
    post:
      summary: Create a user account 
      tags:
      - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createUserReq"
      responses:
        201:
          description: OK

  /users/{user_id}:
    get:
      summary: Get a user by id
      tags:
      - User
      parameters:
      - $ref: '#/components/parameters/userId'
      responses:
        '200':    # status code
          description: A object of user
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/User"


  /{store_id}/orders:
    get:
      summary: List all orders for a store.
      tags:
      - Order
      parameters:
      - $ref: '#/components/parameters/storeId'
      responses:
        '200':    # status code
          description: A JSON array of orders
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Orders"

    post:
      summary: Create an order for a store
      tags:
      - Order
      parameters:
      - $ref: '#/components/parameters/storeId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createOrderReq"
      responses:
        201:
          description: OK

  /orders/{order_id}:
    put:
      summary: Update status of an order
      tags:
      - Order
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateOrderReq"
      responses:
        '200':    # status code
          description: OK
    get:
      summary: Get an order by id.
      tags:
      - Order
      parameters:
      - $ref: '#/components/parameters/orderId'
      responses:
        '200':    # status code
          description: A object of order
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Order"
    delete:
      summary: Cancel an order
      tags:
      - Order
      parameters:
      - $ref: '#/components/parameters/orderId'
      responses:
        '200':    # status code
          description: OK









components:
  schemas:
    droneId:
      type: string
      readOnly: true
      example: 6Ek6KBqxceCJm0OtDrone
      title: id
      description: A unique signature to represent a drone
    droneStatus:
      title: status
      description: |-
        A simple flag to determine the status of drone;
        0: in matainence 1:in progress 2: available
      type: integer
      example: 0
      enum:
      - 0
      - 1
      - 2
    weightLimit:
      type: integer
      example: 40
      title: weight_limit
      description: the capacility of weight 
    tripsLeft:
      type: integer
      example: 3
      title: trips_lefts
      description: the trips left before matianence
    storeId:
      type: string
      example: 8ek6KBqxceCJm0OtStore
      title: store_id
      description: A unique signature to represent a store
    Drone:
      type: object
      description: A single drone
      required:

      - weight_limit
      - trips_left
      - store_id
      - status
      properties:
        id:
          $ref: "#/components/schemas/droneId"
        weight_limit:
          $ref: "#/components/schemas/weightLimit"
        trips_left:
          $ref: "#/components/schemas/tripsLeft"
        status:
          $ref: "#/components/schemas/droneStatus"
        store_id:
          $ref: "#/components/schemas/storeId"
    Drones:
      type: array
      description: A collection of selected drones acquired by a query.
      items:
        $ref: "#/components/schemas/Drone"


    createDroneReq:
      type: object
      description: A request for create drone request
      required:
      - trips_left
      - status
      - weight_limit
      properties:
        trips_left:
          $ref: "#/components/schemas/tripsLeft"
        status:
          $ref: "#/components/schemas/droneStatus"
        weight_limit:
          $ref: "#/components/schemas/weightLimit"

    updateDroneReq:
      type: object
      description: A request for updating drone request
      required:
      - trips_left
      - status
      properties:
        trips_left:
          $ref: "#/components/schemas/tripsLeft"
        status:
          $ref: "#/components/schemas/droneStatus"

    employeeId:
      type: string
      readOnly: true
      example: w3r33487y87t8employee
      title: id
      description: A unique signature to represent a employee

    firstName:
      type: string
      example: Meng
      title: first_name
      description: the first name of employee

    lastName:
      type: string
      example: Yan
      title: last_name
      description: the first name of employee

    phone:
      type: string
      example: 951-892-0434
      title: phone number
      description: the phone of employee

    ssn:
      type: string
      example: 003-59-3935
      title: ssn
      description: the ssn of employee, need to be encrypted in the database

    licenseId:
      type: string
      example: 2owefkerp
      title: license id
      description: the license id of employee

    experience:
      type: integer
      example: 2
      title: experience number
      description: the experience number of pilot


    expirationDate:
      type: string
      example: 01-01-1990
      title: expired date 
      description: the expired date of license 

    isFree:
      type: boolean
      example: true
      title: is free 
      description: the status of pilot
    

    Employee:
      type: object
      description: A single employee
      required:
      - first_name
      - last_name
      - phone
      - ssn
      - store_id
      - license_id
      - experience
      - expiration_date
      - is_free
      properties:
        id:
          $ref: "#/components/schemas/employeeId"
        first_name:
          $ref: "#/components/schemas/firstName"
        last_name:
          $ref: "#/components/schemas/lastName"
        phone:
          $ref: "#/components/schemas/phone"
        ssn:
          $ref: "#/components/schemas/ssn"
        store_id:
          $ref: "#/components/schemas/storeId"
        license_id:
           $ref: "#/components/schemas/licenseId"
        experience:
           $ref: "#/components/schemas/experience"
        expiration_date:
           $ref: "#/components/schemas/expirationDate"
        is_free:
           $ref: "#/components/schemas/isFree"


    Employees:
      type: array
      description: A collection of selected employees acquired by a query.
      items:
        $ref: "#/components/schemas/Employee"

    createEmployeeReq:
      type: object
      description: A request for create employee request
      required:
      - first_name
      - last_name
      - phone
      - ssn
      - license_id
      - experience
      - expiration_date
      - is_free
      properties:
        first_name:
          $ref: "#/components/schemas/firstName"
        last_name:
          $ref: "#/components/schemas/lastName"
        phone:
          $ref: "#/components/schemas/phone"
        ssn:
          $ref: "#/components/schemas/ssn"
        license_id:
           $ref: "#/components/schemas/licenseId"
        experience:
           $ref: "#/components/schemas/experience"
        expiration_date:
           $ref: "#/components/schemas/expirationDate"
        is_free:
           $ref: "#/components/schemas/isFree"


    updateEmployeeReq:
      type: object
      description: A request for updating employee status request
      required:
      - is_free
      properties:
        status:
          $ref: "#/components/schemas/isFree"
  
    itemId:
      type: string
      readOnly: true
      example: a23fwItem
      title: id
      description: A unique signature to represent an item

    itemName:
      type: string
      example: iphone
      title: name
      description: name of item

    unitPrice:
      type: number
      example: 1980.05
      title: unit price
      description: unit price of item

    weight:
      type: number
      example: 2.21
      title: weight (lbs)
      description: weight item

    Item:
      type: object
      description: A single item
      required:
      - name
      - unit_price
      - weight
      - store_id
      properties:
        id:
          $ref: "#/components/schemas/itemId"
        name:
          $ref: "#/components/schemas/itemName"
        unit_price:
          $ref: "#/components/schemas/unitPrice"
        weight:
          $ref: "#/components/schemas/weight"
        store_id:
          $ref: "#/components/schemas/storeId"
    Items:
      type: array
      description: A collection of selected items acquired by a query.
      items:
        $ref: "#/components/schemas/Item"
  
    createItemReq:
      type: object
      description: A request for create item request
      required:
      - name
      - unit_price
      - weight
      properties:
        name:
          $ref: "#/components/schemas/itemName"
        unit_price:
          $ref: "#/components/schemas/unitPrice"
        weight:
          $ref: "#/components/schemas/weight"

    lineId:
      type: string
      readOnly: true
      example:  34w45Titem1
      title: id
      description: A unique signature to represent a line

    orderId:
      type: string
      readOnly: true
      example:  1w234qqorder
      title: id
      description: A unique signature to represent an order

    quantity:
      type: integer
      example:  40
      title: quantity
      description: A quantity of each item


    Line:
      type: object
      description: A single line
      required:
      - order_id
      - item_id
      - quantity
      properties:
        id:
          $ref: "#/components/schemas/lineId"
        order_id:
          $ref: "#/components/schemas/orderId"
        item_id:
          $ref: "#/components/schemas/itemId"
        quantity:
          $ref: "#/components/schemas/quantity"
    Lines:
      type: array
      description: A collection of selected lines acquired by a query.
      items:
        $ref: "#/components/schemas/Line"


    createLineReq:
      type: object
      description: A request for create line
      required:
      - order_id
      - item_id
      - quantity
      properties:
        order_id:
          $ref: "#/components/schemas/orderId"
        item_id:
          $ref: "#/components/schemas/itemId"
        quantity:
          $ref: "#/components/schemas/quantity"

    storeName:
      type: string
      example: Apple
      title: name
      description: A unique name of store

    revenue:
      type: number
      example: 102000.00
      title: income
      description: the received income of store

    Store:
      type: object
      description: A single store
      required:
      - store_id
      - name
      - revenue
      properties:
        id:
          $ref: "#/components/schemas/storeId"
        name:
          $ref: "#/components/schemas/storeName"
        revenue:
          $ref: "#/components/schemas/pendingRev"

    Stores:
      type: array
      description: A collection of selected stores acquired by a query.
      items:
        $ref: "#/components/schemas/Store"

    createStoreReq:
      type: object
      description: A request for create store 
      required:
      - name
      properties:
        name:
          $ref: "#/components/schemas/storeName"

    pendingRev:
      type: object
      description: pending revenue from pending orders
      required:
      - pendingRevenue
      properties:
        pending_revenue:
          $ref: "#/components/schemas/revenue"



    userId:
      type: string
      readOnly: true
      example:  user1
      title: id
      description: A unique signature to represent a user

    isManager:
      type: string
      readOnly: true
      example:  user1
      title: id
      description: A unique signature to represent a user


    userName:
      type: string
      example:  myan68@gatech.com
      title: user name
      description: user name

    password:
      type: string
      example:  pwdisgroup33
      title: password
      description: password


    address:
      type: string
      example:  california
      title: address
      description: user's address


    customerRating:
      type: integer
      example:  5
      title: rating
      description: customer rating


    credits:
      type: number
      example:  1255
      title: credit
      description: customer credits

    User:
      type: object
      description: A single user
      required:
      - first_name
      - last_name
      - phone
      - is_manager
      - user_name
      - password
      - address
      - customer_rating
      - credits
      properties:
        id:
          $ref: "#/components/schemas/userId"
        first_name:
          $ref: "#/components/schemas/firstName"
        last_name:
          $ref: "#/components/schemas/lastName"
        phone:
          $ref: "#/components/schemas/phone"
        is_manager:
          $ref: "#/components/schemas/isManager"
        user_name:
          $ref: "#/components/schemas/userName"
        password:
           $ref: "#/components/schemas/passwordd"
        address:
           $ref: "#/components/schemas/address"
        customer_rating:
           $ref: "#/components/schemas/customerRating"
        credits:
           $ref: "#/components/schemas/credits"


    createUserReq:
      type: object
      description: A request for creating user
      required:
      - first_name
      - last_name
      - phone
      - is_manager
      - user_name
      - password
      - address
      - customer_rating
      - credits
      properties:
        id:
          $ref: "#/components/schemas/userId"
        first_name:
          $ref: "#/components/schemas/firstName"
        last_name:
          $ref: "#/components/schemas/lastName"
        phone:
          $ref: "#/components/schemas/phone"
        is_manager:
          $ref: "#/components/schemas/isManager"
        user_name:
          $ref: "#/components/schemas/userName"
        password:
           $ref: "#/components/schemas/passwordd"
        address:
           $ref: "#/components/schemas/address"
        customer_rating:
           $ref: "#/components/schemas/customerRating"
        credits:
           $ref: "#/components/schemas/credits"



    totalCost:
      type: number
      example: 100.27
      title: cost 
      description: the total cost of an order

    totalWeight:
      type: number
      example: 30.26
      title: weight 
      description: the total weight of an order

    orderStatus:
      type: integer
      example: 1
      title: status
      description:  0-cancel, 1-pending, 2-shipping, 3-delivered 

    Order:
      type: object
      description: A single order
      required:
      - userId
      - storeId
      - droneId
      - employeeId
      - totalCost
      - totalWeight
      - orderStatus
      properties:
        id:
          $ref: "#/components/schemas/orderId"
        user_id:
          $ref: "#/components/schemas/userId"
        store_id:
          $ref: "#/components/schemas/storeId"
        drone_id:
          $ref: "#/components/schemas/droneId"
        employee_id:
          $ref: "#/components/schemas/employeeId"
        total_cost:
          $ref: "#/components/schemas/totalCost"
        total_weight:
          $ref: "#/components/schemas/totalWeight"
        order_status:
          $ref: "#/components/schemas/orderStatus"

    Orders:
      type: array
      description: A collection of selected orders acquired by a query.
      items:
        $ref: "#/components/schemas/Order"

    createOrderReq:
      type: object
      description: A request for create order
      properties:
        store_id:
          $ref: "#/components/schemas/storeId"
        drone_id:
          $ref: "#/components/schemas/droneId"
        employee_id:
          $ref: "#/components/schemas/employeeId"
        total_cost:
          $ref: "#/components/schemas/totalCost"
        total_weight:
          $ref: "#/components/schemas/totalWeight"
        order_status:
          $ref: "#/components/schemas/orderStatus"
        user_id:
          $ref: "#/components/schemas/userId"
          
    updateOrderReq:
      type: object
      description: A request for updating order status
      required:
      - status
      properties:
        status:
          $ref: "#/components/schemas/orderStatus"

    
  parameters:
    storeId:
      name: id
      in: path
      description: A Uniquely random (UUID) used for selecting one Store
      required: true
      schema:
        $ref: "#/components/schemas/storeId"
    droneId:
      name: id
      in: path
      description: A Uniquely random (UUID) used for selecting one Drone
      required: true
      schema:
        $ref: "#/components/schemas/droneId"
    employeeId:
      name: id
      in: path
      description: A Uniquely random (UUID) used for selecting one Employee
      required: true
      schema:
        $ref: "#/components/schemas/employeeId"

    itemId:
      name: id
      in: path
      description: A Uniquely random (UUID) used for selecting one Item
      required: true
      schema:
        $ref: "#/components/schemas/itemId"

    lineId:
      name: id
      in: path
      description: A Uniquely random (UUID) used for selecting one Line
      required: true
      schema:
        $ref: "#/components/schemas/lineId"
    userId:
      name: id
      in: path
      description: A Uniquely random (UUID) used for selecting user
      required: true
      schema:
        $ref: "#/components/schemas/userId"
    orderId:
      name: id
      in: path
      description: A Uniquely random (UUID) used for selecting order
      required: true
      schema:
        $ref: "#/components/schemas/orderId"